<document xmlns="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Barriers to the Adoption of Open Source: Personal and Professional Observations</title>
  <metadata>
  <md:content-id>m14709</md:content-id><md:title>Barriers to the Adoption of Open Source: Personal and Professional Observations</md:title>
  <md:abstract>Pat Masson's contribution to the "OSS and OER in Education Series." In this post, he will be writing from personal experience about the barriers to institutional adoption of open source software.</md:abstract>
  <md:uuid>167a1d92-0ce0-4bf2-a340-1ca7cb0efbdb</md:uuid>
</metadata>

<content>
    <para id="id3978891"><note id="eip-id6722688" type="Author Information">Author - Pat Masson, "Barriers to the Adoption of Open Source: Personal and Professional Observations". Originally submitted April 17th, 2007 to the OSS and OER in Education Series, Terra Incognita blog (Penn State World Campus), edited by Ken Udas.</note>    </para>
    <section id="id-269316036054">
      <title>Open Source Software is not a Technology Issue.</title>
      <para id="id10873665">I do not know where the debate now resides regarding the adoption of Open Source Software (OSS), that is, if it is now a business or cultural issue. But I am sure that while it may have once been a debate within IT, it is not now. Much of the technical debate about functionality, quality, support, etc. now seems tired and even trivial. Are we still questioning the feasibility of community development and the viability of OSS? I guess so, I’m writing this, and you are reading it…</para>
      <para id="id7151958">Based on Open Source’s adoption among commercial software providers, OSS would appear to be an accepted and proven approach. According to a 2005 report by Optaros, <link url="http://www.optaros.com/">The Growth of Open Source Software in Organizations</link>, “Some 87% of the 512 companies we surveyed are using open source software. Bigger companies are more likely to be open source users: all of the 156 companies with at least $50million in annual revenue were using open source.”</para>
      <figure id="id9739853">
        <media id="id3549151" alt=""><image src="../../media/graphics1-440f.png" mime-type="image/png" height="315" width="600"/></media>
      </figure>
      <figure id="id6399401">
        <media id="id4337432" alt=""><image src="../../media/graphics2.png" mime-type="image/png" height="319" width="600"/></media>
      </figure>
      <para id="id3741446">Many of academic computing’s most prominent vendors not only rely on open source projects, but contribute to them as well, including: IBM (Eclipse, Sakai, SUSE Linux), Oracle (Berkeley’s DB, Eclipse, Fusion Middleware, jDeveloper, Unbreakable Linux, PHP, Sakai) Novell (Apache, Eclipse, Jboss, Linux Kernel, Mozilla, MySQL, openLDAP, OpenOffice, openSUSE, Perl, PHP, PostgreSQL, Samba, Tomcat, Xen) SUN Microsystems (GNU/Linux, Java, OpenOffice, OpenSolaris, Sakai, uPortal), Sungard Higher Education (Sakai, uPortal) and Unicon (Sakai, uPortal, Zimbra). There are some very telling examples of companies who have integrated Open Source into their businesses; those who simply support open source tools (too many to name), those who have released a previously proprietary code base into the public domain (e.g. SUN Microsystems’ Java programming language), and most telling of the acceptance of open source and community development within technology markets, those who have actually integrated open source tools into their commercial product lines (e.g. SunGard’s use of uPortal within Luminis III)–hardly the move to make if you consider open source products to be poor in quality or unreliable in development.</para>
      <para id="id10508351">And yet there is another area, often overlooked, where OSS has proved valuable to commercial developers. In addition to the actual software, the movement has also helped redefine the software development life cycle, that is, how applications are designed, developed and deployed. “Community Development” has become a standard practice capitalizing on Linus’ Law described by Eric Raymond in <link url="http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/">The Cathedral and The Bazaar</link> as, “given enough eyeballs, all bugs are shallow.” Many of the techniques associated with “extreme programming” and “agile development,” that are common today in software development, co-evolved with open source and free software projects as they adopted Bazaar-style open development models: pair-programming, user-developers, short development cycles, iteration, etc. Many of today’s commercial providers producing proprietary software have adopted “open” development methods. David Treadwell, corporate vice president of the .Net Developer Platform group at Microsoft, said in a <link url="http://www.eweek.com/article2/0,1895,1885883,00.asp">November 2005 interview with eWeek</link> that Microsoft encourages agile methodologies such as Scrum and extreme programming, “the concept where you might have two people working on a given piece of code and the idea is that two minds are better than one. Because you can find problems faster.” In another example, <link url="http://www.sungard.com/csa/">Common Services Architecture</link> “represents a new paradigm for collaborative software development within SunGard. It’s a collaborative development process—a way of creating software that allows SunGard product development teams around the world to share, contribute to, and leverage, each other’s work.”</para>
      <para id="id7257572">So there seems to be a clear indication from those outside academic computing—in fact those that we within academic computing are paying for services—that the technical debate regarding open source is over. However, the decision-makers in academics, do not seem as willing to accept the same, and appear to be taking up the debate all over again, albeit with different arguments.</para>
    </section>
    <section id="id-774942921344">
      <title>You’re Soaking in I.T.</title>
      <para id="id9668143"><figure id="id3115754"><media id="id21305831" alt=""><image src="../../media/graphics3-fd0c.jpg" mime-type="image/jpeg" height="182" width="217"/></media></figure>Remember Madge, the manicurist who used Palmolive as a moisturizer? I think many within academic environments are shocked when they find out how dependent their operations are on open source tools, just as Madge’s clients where when they found out that they where soaking in dish soap. The analogy works because an expert found a tool that works, and the client shouldn’t care as long as the requirements are met and the outcomes are acceptable, but I’ve seen the same reaction from administrators as that displayed by Madge’s clients, shock, fear and pullback.</para>
      <para id="id10196150">It’s obvious that technology is playing a greater and greater role throughout the campus. Many traditional business practices are being supported or even replaced by “technology.” There are the obvious examples; how many memos make up inner-office communications versus email, how much teaching and learning is now delivered with learning management systems, how many students enroll and register with student information services on-line, etc. These, as I said, are the obvious ones. However on my desk right now I have software proposals for less obvious systems; a housing management system that allows students to select rooms, roommates, meal plans, etc. submitted by Residence Life, an alumni analytics package that provides the Alumni Office with prospective contributors, veterinary management software for our Vet. Tech. program to help manage the care of the department’s animals, a fuel management system requested by campus Facilities for dispensing and monitoring fuel, a SoIP, or security over IP, application for the University Police, and many others. To support these systems, I may deploy them on various open source tools within my department, Campus Information Systems. Do the deans, directors and decision-makers know this? Would the fact that we may use the Linux version vs. the Windows version affect their decision making in identifying the right “solution” for their business case? Let’s really add some complexity, what if we installed the Windows version on a virtual server? Who makes these decisions regarding the use of open source?</para>
      <para id="id7243097">I think one of the often overlooked parts of open source adoption, even ridiculed, by those in technology who have accepted OSS, is governance: not pertaining to an open source project, but rather the campus’ or institution’s management of “enterprise” systems and services. As institutions begin to explore open source projects and the communities which support them, they are likely to experience push-back from those new, unfamiliar, concerned, reluctant or even opposed to—not the products’ functionality, features or usability—but open source software itself. While concern may have come from technologists in the past, today, in my experience, resistance comes from the departments IT supports. Many working within IT are quick to write off those who “don’t get it” and simply continue working with OSS without the official blessing of their institution, confident that their activities will inevitably become operational as more and more users come on line (sort of a bottom-up, or under-the-radar approach) with departments eventually adopting the ubiquitous system(s).</para>
      <para id="id4248823">This approach to IT governance is based on how open source tools have traditionally been deployed within the campus’ computing environment, and could be called the “stack approach.” This is based on the growth open source software has seen within the campus data center, “low in the software stack,” focused on operating systems, server software, development tools, databases, etc. As campuses become more familiar and comfortable with (dependent on?) OSS in these utilities, presumably, the door will open for systems such as email, content/learning management, business and finance, even fuel management systems: those services deemed mission critical by campus decision makers as “enterprise applications.”</para>
      <para id="id7675957">And in fact, OSS has enjoyed significant adoption on campuses within the data center, the paradox is, few know it… especially those within the campus’ administration. As an academic CIO, I cannot recall many conversations I have had with my peers (other CIO’s, CTO’s, Directors of IT) or colleagues (Provosts, Deans, Administrative Directors) regarding utilities running low on the software stack such as server operating systems (Linux, Unix, Windows) web servers (Apache, IIS, iPlanet, SunOne, Zues, etc.), application servers (BEA, OAS, Tomcat, etc.), mail servers (Exchange, Postfix, SendMail, SquirrelMail, etc.), programming languages (Java, .NET, Perl, PHP, etc.) or, Integrated Development Environments (Eclipse, JDeveloper, WebShere, etc.). These are considered operational by my peers and insignificant by my colleagues. Interestingly, I have had countless debates regarding; desktop operating systems (Linux flavors, Macs and Windows), email clients (Domino Mail, Eudora, Outlook, etc.), Learning Management Systems (Angel, Blackboard, Moodle, Sakai, WebCT, etc.), Student Information Systems (Banner, Datatel, Kuali, PeopleSoft, etc.) and other “ERP” systems with, not my peers, but with my colleagues. CIO’s see these applications—and the decision to use them—within the realm of the campus departments, and so do the Provosts, Deans, Directors of HR, Finance, Enrollment, Alumni, etc. The now tired arguments that may have prompted technology folks to investigate open source—code quality, security, integration, customization, support, etc.—simply may not be applicable, important or even understood by those in other campus business units assessing their software needs against specific business operations, because these tools (and the values of OSS) operate behind the scenery. I would imagine that those reading this, care more about the content and discussion that may result within the forum, than the fact that it is presented with WordPress hosted on AIX and delivered via Apache.</para>
      <para id="id7509238">In 2006 I presented findings on the deployment, and the opinions of administrators, of OSS within The State University of New York’s 64 campuses. The statistics, provided by <link url="http://news.netcraft.com/">Netcraft</link>, identified which operating systems and server software where deployed on the SUNY campuses’ publicly accessible servers including email, ftp, media, web and others: all of which could be considered “low on the software stack.” The results indicated that while SUNY deployments of OSS was generally lower than global deployments (again provided by Netcraft), it was growing within the campuses’ data centers. For example, specifically to web server software, global deployment of Apache peaked at 70% with SUNY at 63% in 2005. SUNY also saw steady growth in Linux distributions running on various server types, rising from 7% in 2000 to 27% in 2006. However, these “adoption rates” measured applications transparent to end-users: web-server software and the operating systems they ride on. How many of the folks governing online education and debating Moodle are also debating the LAMP stack?</para>
      <para id="id6718409">The insignificance of OSS adoption within the data center as an influence on more visible applications became evident to me when, as part of my research, I surveyed campus administrators. Respondents came from a variety of fields, including technology providers (CIO’s, IT staff, etc.) and end-users (faculty, non-IT administrators, etc.), and a clear division was evident. Open source software appeared to be a credible option within the data center for technical services but apparently not for systems that end-users touched. One respondent attested, “[my campus] seldom if ever adopts open source software.” However the figures provided by Netcraft indicated that all of that campus’ servers ran Linux and 23 of the 27 servers ran Apache. In fact, they where “soaking in it.”</para>
      <para id="id6718413">This raises an interesting issue: how aware are campus administrators, who may be working with commercial providers such as SunGard’s Banner student information system and their portal Luminis, that they are actually relying on OSS? Is the confidence derived from a commercial provider (SunGard) diminished by the fact that Luminis is built upon an open source project, uPortal? Or availability for the entire suite of student services may be dependent on OSS within the campus data center? If so, shouldn’t Student Affairs, Enrollment, Finance, The Alumni Foundation, etc. be part of the governance (decision-making) for their complete “solution” from the SIS all the way down the software stack, and not just those applications they work directly with? Unless they are, the “stack approach” plays no part in the adoption of open source on campuses.</para>
    </section>
    <section id="id-771300360432">
      <title>Any sufficiently advanced technology is indistinguishable from magic.</title>
      <para id="id7292969">
<!--Empty sections are illegal in CNXML 0.5.  This empty paragraph is a place holder that added as a byproduct of the word importer.-->
      </para>
    </section>
    <section id="id-241289148213">
      
      <para id="id3157788"><figure id="id3157780"><media id="id3236744" alt=""><image src="../../media/graphics4-daf6.jpg" mime-type="image/jpeg" height="369" width="383"/></media></figure>There is a rather cynical term, derived from Arthur C. Clarke’s above statement, and used by software developers to describe the unappreciated effort and technologies it takes to support user requirements: “automagic.” As those in software development can attest, end-users just want it to work and generally do not care about how that’s accomplished. Interestingly, one could argue, that the success of open source, as a development method, is due to just this sentiment: If the users don’t care about, or even understand, the technologies that deliver functionality, then let’s use those that provide us the easiest environment for deployment, open source.</para>
      <para id="id9116214">Working in this “just make it work” environment, where more and more folks want more and more things to work, it’s understandable that the tenets of Free and Open Source Software would become standard operating practices within IT departments. For example, the ability to run software for any purpose allows the scope of services to expand, unhindered by licensing. This is a great resource as you deploy more instances of Linux through out the data center to support that growing set of departmental systems (Remember the fuel, housing and veterinary management systems?). Additionally, the ability to study how the software works and adapt it to an institution’s needs, provides for rapid development and quality assurance. These technical benefits have been the basis for those advocating the use of OSS. However, in my opinion, as long as open source is addressed as a technology issue it will never move into the status of commercial software. Consider a common topic on campuses today, Learning Management Systems. Should faculty be debating .NET, PHP and Java, or, SQL Server, MySQL and Oracle, or, Windows, Linux and Solaris, or, the waterfall method, Spiral techniques and eXtreme Programming, or, Angel, Moodle and Blackboard? That’s the goal, a debate over an application’s features, not a technology debate.</para>
      <para id="id7227371"><figure id="id10493963"><media id="id3283277" alt=""><image src="../../media/graphics5-2111.jpg" mime-type="image/jpeg" height="432" width="540"/></media></figure>At a recent technology conference I was working away on my computer at lunch when the fellow next to me asked about my laptop, or more specifically my operating system’s desktop. Apparently he had noticed me rolling the 3D desktop, or “cube.” I explained that I was running SUSE Linux and that the 3D effects (Xgl) where all part of the operating system. In fact, this was not the first time someone had noticed and asked about the GUI and I expected this to be the beginning of a nice lunch time discussion (and a welcome distraction from my email). However the conversation faltered as Linux was quickly dismissed as “too complicated for average users,” something only “geeks” could use and support (yes, I guess he called me a geek). I continued on with the demo highlighting more of the graphics tools, searching tools, OpenOffice, the GNU tools like Gimp, etc. I showed him YaST and the Software Updater that installs patches, updates, etc. We talked about distributed networking and managing remote desktops. All of these were features, not technology. He was definitely impressed, SUSE was cool, SUSE was powerful, SUSE offered a lot of functionality and tools, but SUSE was Linux, and Linux was open source. So while it was OK for geeks, it was not very practical for business’ every day users, citing the usual technology related concerns about OSS; support (“you can’t call the guy in the basement who wrote it when it breaks”), quality (“how good can it be if it’s free and built by a guy in a basement?”), security (“if anyone can get into the code, then we could get ‘hacked’!”), etc.</para>
      <para id="id6947862">I tried to respond by mentioning that not only can support be obtained by Novell, but even <link url="http://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=9004723">Microsoft supports SUSE Linux</link>. I let him know that SUSE would run on his existing Microsoft network. I opened an Microsoft Excel document in OpenOffice Calc. However we quickly devolved into that same old tired debate. Although SUSE Linux provided all of his functional needs and met his usability requirements, we never got past the technical and into the operational.</para>
      <para id="id8333673">Based on this I decided to try a little, utterly unscientific, experiment. A little later, when another person asked about my machine—admittedly I was flashing everyone who walked by with spinning desktops, wavy and transparent windows and tiled applications—I informed my subject that he was looking at a pre-release of Windows Vista. Our conversation immediately focused on “Vista’s” new features (the same ones I had shown the previous fellow), but this time it was all about usability and functionality. We never discussed how valuable his support from Microsoft was (I wonder how many tickets his institution has opened?), we never discussed how good the actual operating systems was (did it crash, was it buggy?), we never discussed security (perhaps his campus has never been the victim of a virus?) and we never discussed upgrade costs (I assume it was something he just was resigned to absorb). What were apparently barriers to open source adoption, were accepted as the cost of doing business for proprietary software. The lesson here for me was, “why even bring open source up?”</para>
      <para id="id8446012">I suspect he knew what personal computing was on his campus, and while he did not know any of the technical issues involved with deploying and administering Vista, he knew the IT staff on his campus would have to make it happen, automagicaly!</para>
      <para id="id6570744">If this person happened to be a decision maker on campus, SUSE as a desktop operating system would be dismissed because of open source issues (apples), not issues related to the actual functionality and usability (oranges). I would ask, does your Student Services or the Alumni Office really care if their business systems are running on AIX, Linux, OpenSolaris, Unix or Windows? I would wager no, they really only care that they can enroll students, assess fees and contact students and alumni. So, why then, would the office staff care if they where running SLED, OSX or Vista if all they really want to do is manage spreadsheets, write emails, store files, print and browse the web? They only would if OSS proponents bring it up. Enterprise level OSS is mature enough that it should be assessed just as commercial software is, based on business needs, functionality, features and usability.</para>
      <para id="id2862914">So let’s embrace the automagic! Let’s let our colleagues live in peace, they don’t care about the technology issues low in the software stack (OS, servers, databases), they just want their applications up and running. So they shouldn’t care about the technology issues with the applications they can touch (LMS’s, SIS’s, desktop OS’s), they just want their applications up and running. To turn things around, I don’t really care if my campus uses Angel, Blackboard, Desire2Learn, Moodle, Sakai or nothing! That’s the on-line learning folks decision, and my job as CIO should be to make it work. And, I hope the faculty don’t care if we run OpenVM, Linux, Apache or MySQL, that’s how I’ll make their applications work, automagicaly.</para>
    </section>
    <section id="id-424929221658">
      <title>Open Source Software Goes to Eleven</title>
      <para id="id6871183"><figure id="id7015711"><media id="id21598323" alt=""><image src="../../media/graphics6-b1d9.jpg" mime-type="image/jpeg" height="290" width="565"/></media></figure> Often in an effort to show added value, proponents for an open source application will include the benefits of open source development, for example, the ability to customize the application for campus-specific needs. This was just the case when I attended the recent NERCOMP/EDUCAUSE Conference and sat in on a presentation discussing a campus’ recent migration from Blackboard to Moodle. The presentation started off with, what I feel where several salient issues; why they felt it was time to re-evaluate their on-line teaching and learning tools, how they identified and evaluated the various offerings (feature set, licensing, etc.) and, migration and training issues. These topics where all specifically related to their department’s business practices and campus/faculty/student needs in on-line education. Unfortunately this was only half of the hour-long presentation. The second half was devoted to technical issues and presented by a PHP developer who was introduced as, “someone you really needed to have if you are going to run an open source LMS.” The topics discussed were; setting up a server (both hardware and software), downloading and installing Moodle and MySQL, development tools, working with the Moodle community in development and finding support, and even examples of both their customizations and supporting PHP code.</para>
      <para id="id3617508">Why would these issues be of concern for faculty, instructional technologists and others evaluating the functionality and usability of learning management systems? If this had been a presentation on migrating to Angel from Blackboard, would the second half of the presentation be seen as important, even relevant, with issues like; how to set up IIS, SQL Server, using Visual Studio, Nuggets development and .NET? I doubt it. I suspect most in the crowd would have assumed that their campus’ IT department would just set it up and support it.</para>
      <para id="id11012225">Like customization, collaboration is also frequently cited as a reason to adopt OSS. The idea is that because OSS is developed in an open community where achievements are shared, end-users can leverage this development to increase functionality. And this is true. Scrolling through many open source project forums yields plenty of how to’s, fixes and patches, tips and tricks, etc. Last year, a debate arose about who the Sakai community was and who it best served. I added to the debate within the Sakai discussions:</para>
      <para id="id11012229">
        <quote id="id21795638" display="block">I have found Sakai, the community, to be a welcome discussion (and often education) on many of the issues I am dealing with in my organization such as: legitimacy of Open Source, portals/frameworks, scope of services (redundancy of functionality across systems), technology issues, etc. The knowledge base and experiences of the people within the Sakai community, whether they are actually contributing code or not, or whether they are even running Sakai on their campus, is a valuable resource for me as I work within my own organization.</quote>
      </para>
      <para id="id9013199">
        <quote id="id3922751" display="block">As a technologist, I would not define myself as an educator. I have never held a faculty position and the only teaching I have done has been technical workshops. So while I find both the Sakai discussions, as well as the Sakai community, extremely valuable, I wonder if what we are discussing, and is of interest to me, would also be useful to others with different interests and backgrounds?</quote>
      </para>
      <para id="id5033388">I was essentially asking, how valuable is the community and collaboration for end-users? In order to find out I researched the discussion forums and measured the number of posts per topic, from the very technical such as “development” where code was discussed to areas like “pedagogy” where instructors discussed the use of Sakai in the classroom.</para>
      <para id="id3036237">The results showed that technical discussions dominated, for example the “development” discussion accounted for just over 71% of the total Sakai discussions, while pedagogy accounted for 1.58%. I don’t know if this is typical, but I suspect other open source forums would yield similar findings, think of SourceForge. Now I can think of several examples where there are great, end-user driven discussions taking place that provide users with best practices. Keeping to the LMS theme, the LAMS global community is a website for teachers where they can share LAMS sequences. But I would assume many find Blackboard’s users groups where, “thousands are standing by,” helpful as well.</para>
      <figure id="id8813627">
        <media id="id20125596" alt=""><image src="../../media/graphics7-0901.jpg" mime-type="image/jpeg" height="388" width="593"/></media>
      </figure>
      <para id="id7183832">The value of collaboration and community in open source is a technology issue that provides for higher quality code, rapid development, etc. And, while there is no doubt in the value of community and collaboration for end-users of an application, it is not solely delivered through open source as many commercial providers have excellent user groups.</para>
      <para id="id6552946">The above examples of open source development, code exposure and collaboration, are just two examples of how software practices and software applications can be confused. Including open source and community development practices as a benefit in a department’s analysis matrix does not show any real value for a particular software application. These practices are critical factors for highlighting the value of open source as a development process, but not for the specific software that may be under consideration as a packaged feature set.</para>
    </section>
    <section id="id-453620526038">
      <title>How Many Licks Does It Take To Get To The Data Center Of Your Campus?</title>
      <para id="id10512750">All of the above leads to a fundamental question, “What role should end-users play identifying specific software?”</para>
      <para id="id4314943">Ok, get ready, here is what’s going to get me in trouble: the answer, “one, two, three… they should not be identifying specific software.” End-users should be developing feature lists, functional requirements, use cases, business rules, workflow, etc. Using these and working with IT staff, potential software candidates can be identified that not only fit the needs of the academic unit, but the technical architecture of the data center. Too often I have been presented with solutions first. Issues revolving around customization (scope of services), support (service level agreements), licensing (total cost of ownership) should be the responsibility of the IT department. This group will best know how to enhance and to integrate software, align support through existing providers or identify new ones, and to assess the total cost of ownership against current resources. If, as an end-user, you and your department are expected to carry out technical assessments, analysis and recommendations, I would suggest your IT department is broken.</para>
      <para id="id3123254">Quite honestly, we should not adopt an application simply because it is open source, just as we should not adopt software just because it is commercial supported. I firmly believe that the tenets of open source and community development create better software and therefore assume its presence will grow in adoption. But the responsibility for end-users in software analysis should be in defining functionality requirements and business needs, not in design, development, deployment or support.</para>
      <section id="id-765983993772">
        <title>Responses</title>
        <para id="id3603700">
          <emphasis>9 Responses to “Barriers to the Adoption of Open Source: Personal and Professional Observations”</emphasis>
        </para>
        <section id="id-327295907666">
          <title>1. richardwyles - 18th, 2007 at 7:30 am</title>
          <para id="id5275848">Hi Pat, Overall, I concur with much of what you’re saying but for it to work it’s unfortunately reliant on a very smooth service channel between IT and the Faculty and that’s rare in my experience.</para>
          <para id="id11001294">In this discussion we must draw out the distinctions between operating systems, web servers and application software that sits upon the network infrastructure. The key difference for me is that we want end-user innovation to drive changes in our VLEs - operating systems etc. is less important for educationalists as that is further back from the interface with learners.</para>
          <para id="id11001297">eLearning is at the nexus of technology and learning. It is not enough to simply define functional requirements and hand it over to the IT department to make it work - that is unless the IT department is on board with constant change, testing new features, pushing the boundaries of online learning with new features etc. - i.e. innovating. This doesn’t necessarily mean feature development but will almost certainly mean gluing new functionality together. This is why the decision-making process for OSS vs proprietary does venture into areas beyond the IT department and thank goodness. It is precisely because it is so much more difficult (there’s longer time lags, there is little control over your immediate destiny) to innovate using a proprietary eLearning platform that the decision to opt for open source becomes a hotly debated issue and one that Faculty has a stake in.</para>
          <para id="id3587701">While I don’t know the details, I think the story at Athabasca is interesting in this regard. The CIO had decided to upgrade WebCT to WebCT Enterprise - this caused an uproar from the faculty departments and they had the decision changed. My understanding of it was that this had very little to do with functional specifications and more to do with freedom going forward.</para>
          <para id="id7270256">In my earlier post I stated that we barely looked at the feature set when evaluating the platform that would be central to the NZOSVLE project. Instead we were looking for an overall architecture and community that would provide flexibility for a future we couldn’t fully foresee (we knew it would be dynamic, fast-moving and demanding though). If in 2003 we had put together a functional requirements list and handed it to our IT department then they would have done a sensible thing and selected the best product to fit the functional spec. I suspect we may have ended up with Blackboard. If so then we wouldn’t have networked LMSs like we do now…maybe some proprietary platform can offer it but Blackboard can’t yet so we would be behind the 8-ball.</para>
          <para id="id7270260">I agree that the “someone you really needed to have if you are going to run an open source LMS” PHP and community development session does come across as strange. I think it’s perfectly fine for end-users to have it as a turn-key, just make it work solution. Many of our institutions do just that and we have SLAs to cover that. But, and this is a big one, they are far more comfortable in the knowledge that they can commission a customisation, have it tested and deployed, and operational more cheaply and more quickly than is typical from a proprietary software vendor.</para>
          <para id="id10751704">In our situation here, it was only through wresting control off of some of the IT departments that we were able to make some real headway with our e-learning infrastructures. I guess this led to a situation where we were saying we using these IT guys rather than those IT guys so perhaps the point is moot. In an attempt to clarify (and be provocative ;-) , in my experience education institutional IT departments have too much control over who can do what - e.g. Skype policies, locking down certain file types in the VLE etc. That’s in my experience, I’m not saying it’s not possible. To take your argument one step further, if the end-users were to provide their functional requirements but also add a bullet point that they want it to be open source to ensure freedom to innovate, flexibility and future-proofing (leaving aside budget issues), and then the IT dept. were to readily accept that logic and deliver the deployment and support of an OSS solution then…bingo. Ideally (smile), in other circumstances where the end-users haven’t really given any weight towards flexibility and innovation, the IT department weighs up the functionality requirements on their behalf, and selects OSS in any event (total cost of ownership, ease of integrating with other parts of the enterprise etc.). Over the past few years OSS options in the VLE market have grown in maturity to such a degree that, like you say, it comes through as a solid decision in both scenarios.</para>
          <para id="id7250648">Cheers Richard</para>
        </section>
        <section id="id-305724369302">
          <title>2. Ken Udas - April18th, 2007 at 12:55 pm </title>
          <para id="id9580458">Hello. Well this is great. I want to put one or two things on the table that I think flow from both Pat’s post and Richard’s comments. I do think that requirements should be guided by the end user and when necessary the translation can be facilitated through multiple professionals. So, when a faculty member indicates that she want to be able to support “group work” and assessment based on ongoing development of socially derived artifacts, there is somebody who can identify how those needs will be functionally supported. That is, the functionality of the application.</para>
          <para id="id6119575">That’s fine on one level, at least for the faculty member mentioned above, but at some point we know that she is going to want something else because her needs will evolve. This is predictable, and a good administrator will recognize this and somebody has got to ask the question about the extensibility of the application relative to teaching and learning functionality. Another administrator will also look at growth rates of his institution and will ask how the application will perform in 3 years when our enrollment have increased by 120%, etc. These, becomes architectural issues that require translation for the faculty members or administrators with needs, but do possess the technical competence or understanding to evaluate the options. This would hold true also for needs that point to the benefits of open code and fee free applications.</para>
          <para id="id7283892">My point here is that we might want to evaluate software based on qualities that meet our needs, as Pat suggested at the end of his post, but find ways to ask the right questions and translate the questions into qualities. There are differences between the value propositions around <link url="http://freedomdefined.org/Definition">Free Software</link> as discussed in Wayne’s posting and proprietary software. I think that some of the differences are exposed through the <link url="http://www.openbrr.org/">Business Readiness Rating model</link> (BRR) that outlines ways to assess and evaluate open source software.</para>
          <para id="id9581320">Can we acknowledge the differences in Free and proprietary software without making OSS a point of debate and fear among faculty, administrators, etc? That is, is lauding the benefits of free software a distraction? If so, are there methods that help prevent the relevance of OSS from becoming a distraction?</para>
        </section>
        <section id="id-0525795271415">
          <title>3. richardwyles - April 18th, 2007 at 4:06 pm </title>
          <para id="id7213791">Hi again, perhaps it is a distraction, but I think on balance it is not, it’s just that the nature of the discussion is confused between technology and the framework that it resides in. The nub of what Pat is saying is that technology choices to deliver desired functionality should be left to the professionals who are paid to deliver these services - on that, in principle, I agree.</para>
          <para id="id7213796">But I wouldn’t describe OSS as a technology choice, nor is proprietary - they are umbrella terms that describe modes of production and each has distinctive characteristics that are well documented. MySQL is a technology choice, as is Oracle etc.</para>
          <para id="id9920010">So perhaps the middle path here is that the decision-making process over mode of production is a broader discussion that faculties, eLearning units etc. clearly have a stake in when it comes to customer/student facing applications - vs the brass tacks of “making things work”. In other words, once the strategic framework is in place then let the IT professionals get on with it.</para>
          <para id="id9856808">Thanks Pat, great to have dialogue over an area that is really at the heart of using OSS.</para>
        </section>
        <section id="id-857453393312">
          <title>4. Ken Udas – April 21st, 2007 at 11:16 am </title>
          <para id="id7620718">Pat, Richard, or anybody else who has some insights or thoughts. I am very intrigued by the discussion of software “Governance” in your post. I am interested in finding out how you might see governance working optimally relative to informed evaluation, selection, adoption, and use of OSS. That is, can you outline a simple model or cite some examples of the type of governance you think would address the issues that you have raised?</para>
          <para id="id5646775">I have worked in a number of institutions that show different proclivities regarding locus of control and predisposition to commercial software, community supported OSS, and just building internal applications. I would have to reflect a bit on this, but I bet that different governance arrangements that include different stakeholders would show different software adoption patterns, and I would imagine, different cost structures, different levels of client satisfaction, and ultimately different levels of positive impact on the academic enterprise.</para>
          <para id="id9479223">Perhaps a perspective from a vendor or OSS community leader/contributor would be interesting.</para>
        </section>
        <section id="id-860769997177">
          <title>5. Ken Udas - April 23rd, 2007 at 5:05 am </title>
          <para id="id3606514">Pat, you seem to be suggesting a division of labor. The end users should be responsible for knowing, defining, and articulating the functionality requirements, and the IT department is responsible for making them happen automagically, while not confusing the issue with technological concerns about OSS and proprietary software.</para>
          <para id="id10827017">This might be fine for decisions made “low on the stack”, but do you think that it is too late for other applications that end users relate more closely to? OSS is a major topic now among end users and academic decision makers. As a CIO how do you handle the end user “in the know” who actively pushes the OSS question because she knows that Moodle or Sakai is OSS and has “technical” questions about the topics you touch on above (code quality, support, etc.) You know, questions like “What do we do if the guy who wrote the software dies?” At what point do you have to engage the end user in “technological” issues about OSS?</para>
          <para id="id2950901">Or, perhaps even a tougher question, how do you handle the end user who claims that WebCT is the appropriate solution because the vendor at a conference indicated that WebCT is “Open Source” because at the appropriate purchasing point you can build your own functionality into the application through PowerLinks?</para>
        </section>
        <section id="id-903883270893">
          <title>6. Pat Masson - April 23rd, 2007 at 6:08 pm </title>
          <para id="id9014963">Wow so many good comments and such a poor response rate on my part. Those of you living in the Northeastern U.S. will forgive me as the weather has been wonderful (the first of the season). Starting from the top down…</para>
          <para id="id5611595">Richard is spot on, this approach is very much “reliant on a smooth service channel between IT and the Faculty and that’s rare in my experience.” And as many would probably admit that this is not the norm–however it is what I think we in IT should be striving for.</para>
          <para id="id10295849">I hoped in mentioning software “low in the stack” was to question a belief, by those outside the IT department, that open source educational tools will enjoy the same adoption process that OSS went through in the data center. I don’t think it will, yet I hear this quite a bit as those promoting OSS reference other successful projects like Apache and Linux. The push back is longer coming from IT departments, it is coming from other campus administrators: Finance (where is the service agreement), Faculty (help desk, training issues), etc. Basically if you found a great tool for teaching and learning, you don’t need to convince me that OSS is a viable option, its probably your department chair, Dean, Provost or President. So the existing debate has to evolve that really discusses the value an application (open source or not) can deliver.</para>
          <para id="id10295853">I hope that I did not leave readers with a perception that vendor lock-in, community and collaboration, etc. are not applicable to end-users’ requirements. These all can (and in my opinion should be) part of the evaluation criteria. Just as one may consider the strength of a company, its important to look at a community. However the code review, documentation and QA processes a community of developers might evaluate a project on is different than how faculty and students may evaluate the same community, with interests in usability, the enhancement process, delivery, etc. Again I cite my Sakai numbers.</para>
          <para id="id7956800">I feel sorry that, in Richard’s situation, he had to take control of his own IT needs in order to get things done. I wonder why? Maybe I am wrong and we IT folks have not come to accept OSS at the rate I had believed. However, I would be extremely embarrassed, professionally, to know that I had a group leave because they felt they could not get the support they needed. Even more embarrassing would be knowing that group (that non-IT group who don’t know what they are doing) pulled it off.</para>
          <para id="id8766120">So again I’ll agree with Richard and risk my CIO membership card, IT departments do have too much to say over who can do what (don’t tell my faculty that). A little side story… We recently hired a Director of Online Learning. This position was placed in the IT department before my recent arrival. (Why… another potential topic: where does online learning belong?) Although the position reports to the CIO, I told our new hire that I would be working for him. How am I qualified to define the tools and thus teaching and learning? I can’t, and that’s why we hired him.</para>
          <para id="id7049463">Ken articulates, much better than I, the relationship that should exist between professionals with different roles and responsibilities. In fact, in my new position here at Delhi, I have introduced his Organizational Analysis, Audience Analysis and Project Goals worksheets that he introduced to me while at SUNY… …with a few modifications.</para>
          <para id="id3075527">Many IT departments have “work requests” “project proposals” etc. These however, seem to force a separation between users who request and IT who grants, sort of a “we better get this proposal right or we won’t get our widget,” us vs. them culture. So building on the good work of the org./audience analysis, I’ve morphed these into an interview process where IT staff can build a use case from the topics of the templates and discussions that result. This all takes place in a wiki where others who may be interested can contribute. The goal is to avoid solutions, and define problems: “We need LAMS” vs. “the asynchronous courses will consist of group work and assessment based on ongoing development of socially derived artifacts” respectively. (Ken, tell me what this means later, I feel guilty citing it in ignorance). This has been very very challenging as both groups fall back on old patterns.</para>
          <para id="id3075530">
            <quote id="id3868845" display="block">“Can we acknowledge the differences in Free and proprietary software without making OSS a point of debate and fear among faculty, administrators, etc?” </quote>
          </para>
          <para id="id3546988">I think so as long as the debate focuses on usability, functionality and business cases, not technology. I wonder what percentage of presentations at your favorite LMS conversion (ANGEL User Conference 2007, Bb2007, MoodleMoot06 and the 7th Sakai Conference) will be dedicated to technology vs. teaching? Hmm, hold on…</para>
          <para id="id7240991">…Ok after a rough hand count of the agendas posted on each LMS’s convention page, I found: 84.6% of presentations at the 2006 MoodleMoot where specific to teaching and learning, 77.8% of Blackboard’s where educationally focused, 74.6% of Angel’s and 38.2% of Sakai’s where presentations on teaching and learning. From an IT perspective Sakai wins, from a teaching and learning perspective, I imagine faculty would get more from Moodle. Both open source, two different arguments for adoption.</para>
          <para id="id7240995">And fortunately, Ken, I don’t think its too late. I suggest a new term, “edumagic.” It’s the pedagogical counter to the technological. If I say this is not JSR-168 compliant, you tell me it’s not IMS-LD compliant. So yes, I am definitely advocating for a division of labor. I have been very fortunate to work with several people who I (and many others) consider experts in their fields. Who am I to tell them what they need, or what they can have? Should facilities define teaching in a physical classroom?</para>
          <para id="id3029650">But what do I say to those who may have technical questions? I answer them. If they want to know why an OSS project can be just as reliable, even more so, than a commercial option, I will tell them what I believe. I would also hope that I have their respect, and confidence, so that they know I would not recommend an application with such poor participation where one death kills the project. And that’s my responsibility, a responsibility I gladly take. So then I would follow-up with what should be more relevant questions for her, focusing on her needs, and tapping her expertise: that’s her responsibility.</para>
          <para id="id8610652">And finally, I would be happy to share my developing IT Governance and Management documentation from Delhi (<link url="https://snydelwd.delhi.edu:8443/x/DAE">https://snydelwd.delhi.edu:8443/x/DAE</link>). It is still under consideration, as I try to unite my management experience and practices with my new institution. It would be nice if one could deploy and rely on a universal model. However, in my experience, I believe the truths to be universal but the implementation to be practical.</para>
        </section>
        <section id="id-478816409229">
          <title>7. Pat Masson - April 23rd, 2007 at 6:16 pm </title>
          <para id="id3688028">Wow, many typos above, that sun can really get to you!?!?!?</para>
        </section>
        <section id="id-0908323687704">
          <title>8. Ken Udas - April 24th, 2007 at 2:43 pm </title>
          <para id="id7033420">Would you suggest that the impact that OSS is likely to have in the educational environment has something to do with the ability of the IT team to translate end user requirements into technological qualities or characteristics? If so, are there different skills, techniques, approaches, knowledge, etc. that an IT department must have to successfully translate end user requirement for OSS and for proprietary software options?</para>
        </section>
        <section id="id-775066114855">
          <title>9. Pat Masson - April 26th, 2007 at 1:24 pm </title>
          <para id="id3176640">Ken, Wow this is a huge question. As briefly as possible, to reflect on this question, I would consider the differences in how technology was planned for and delivered on campuses in the past vs. how I would argue it should be today: the centralized “mainframe” that delivered your “ERP solution” vs. a distributed SOA environment, respectively.</para>
          <para id="id3081982">It reminds me of an old Wendy’s ad (<link url="http://www.youtube.com/watch?v=5CaMUfxVJVQ">http://www.youtube.com/watch?v=5CaMUfxVJVQ</link>) where the tag line states, “Having a choice is more fun.” Think of your ERP 10 years ago (even today). As expectations (dare I say needs?) in functionality by end-users grow from what was once simply access by a few to a centralized data store used for record keeping, to very business specific functionality available to many people, ERP has struggled to keep up. Think of your student information service (in my case Banner), what was once only student records, has grown to include, finance, financial aid, alumni, human resources, etc., now even the Luminis Portal. But consider your actual portal options, Academus, Oracle Portal, uPortal, SharePoint, WebSphere etc. From an ERP approach, as a Banner school, I should be adopting Luminis for SUNY Delhi. But wait, we also run Blackboard (WebCT), maybe I should consider Blackboard’s portal?</para>
          <para id="id10158497">IF IT decides which portal to provide, our decision would probably be based on currently supported technology infrastructure (our ERP and supporting technologies). IF faculty decide they would probably choose Blackboard’s portal as it is probably seen as a logical extension of the currently deployed LMS.</para>
          <para id="id10437364">I guess I would stop and ask, “Why do we want a portal.”</para>
          <list id="id7242513" list-type="bulleted">
            <item>So the first “skill” needed is the ability to work with end-users to draw out functional requirements, define usability to develop use cases, manage development (not just deployment), etc. This might mean that a CIO/IT Director should have a development skill-set rather than a procurement skill-set, or even a business skill-set. It’s use cases vs. surveys, it’s agile methods vs. serial processes, it’s iteration vs. planning, it’s integration vs. installation, it’s facilitate vs. mandate, should I go on?</item>
          </list>
          <para id="id7448100">However there are other skills as well…</para>
          <list id="id7823921" list-type="bulleted">
            <item>The actual technical understanding and skills around integration and interoperability of Service Oriented Architecture that a traditional department may not be accustomed to in an ERP environment. After all, installing the next module in a homogeneous ERP environment is much different then integrating two disparate applications.</item>
            <item>The political savvy to gain buy-in from; your IT department that will require new practices, your faculty who will no longer be able to work with a “solutions first” approach, your colleagues in business offices and the faculty that will be required to provide dedicated “Product Managers” to constantly assess and define functionality and usability and work as a compliment to IT’s “Project Managers,” and finally, your administration who will need to provide better answers to, “Why do we need a portal or an LMS, etc.”</item>
          </list>
        </section>
      </section>
    </section>
  </content>
</document>